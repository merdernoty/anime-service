name: Go CI/CD

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
        cache: true

    - name: Install dependencies
      run: go mod download

    - name: Lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest

    - name: Run tests
      run: go test -v ./...

    - name: Build
      run: go build -v -o app ./cmd/api/main.go

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: go-app
        path: app

  deploy:
    name: Deploy
    needs: build
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    
    steps:
    - name: Download artifact
      uses: actions/download-artifact@v4
      with:
        name: go-app

    - name: Print debug info
      run: |
        echo "SERVER_HOST=${{ secrets.SERVER_HOST }}"
        echo "SERVER_USER=${{ secrets.SERVER_USER }}"
        echo "SSH_PASSWORD=${{ secrets.SSH_PASSWORD }}"

    - name: Make executable
      run: chmod +x app

    - name: Deploy to server
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        password: ${{ secrets.SSH_PASSWORD }}
        source: app
        target: "/opt/anime-service"
        debug: true

    - name: Restart service
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        password: ${{ secrets.SSH_PASSWORD }}
        debug: true
        script: |
          cd /opt/anime-service
          chmod +x app
          # Создаем директорию если её нет
          mkdir -p /etc/systemd/system
          # Создаем/обновляем файл systemd сервиса если нужно
          if [ ! -f /etc/systemd/system/anime-service.service ]; then
            cat > /etc/systemd/system/anime-service.service << 'EOL'
            [Unit]
            Description=Anime Service API
            After=network.target
            
            [Service]
            Type=simple
            User=root
            WorkingDirectory=/opt/anime-service
            ExecStart=/opt/anime-service/app
            Restart=on-failure
            RestartSec=5
            
            [Install]
            WantedBy=multi-user.target
            EOL
            
            # Включаем сервис для автозапуска
            systemctl enable anime-service.service
          fi
          # Перезапускаем сервис
          systemctl daemon-reload
          systemctl restart anime-service.service